This code is from an economics research project I did in the Summer of 2012.

The first file (simplex_poisson_sampling.cpp) is an implementation of Simplex-Driven Poisson Disk Sampling, a very good technique for generating randon numbers. The former I did not implement, but I include it in case anyone wants to use it. I found that code, unattributed, online. Basically, the first 250 hundred lines are boilerplate from Ken Perlin's site, the second 150 are this unattributed adaptation, and the rest is mine. THe output format is just x, y format of the generated points. Some more details: if you generate truly random points on a grid it looks very "sharp". The best way to correct this is Poisson Disk Sampling. The idea is: have a list. Put one point in the list. Now, for each point in the list, generate some number (say 50) "potential points" that are further from your point than a certain number, but closer than some other number. Choose from this list the first point that is further from all other previously chosen points than the "closeness parameter" from before, and add this to your sample. Repeat until no points can be added, i.e. the plane is "packed". For an image see http://upload.wikimedia.org/wikipedia/commons/thumb/b/bb/Poisson_disk_sampling.svg/588px-Poisson_disk_sampling.svg.png
If you drive this process with Perlin Noise, i.e. have Perlin noise dictate the minimum and maximum distances, you get even cooler results, seen here http://images.cnitblog.com/blog/100524/201304/02102426-3fc82eaafa9e483b837f20170ec5fe0d.jpg

The second file (municipality_mergers.R) is the primary project, and includes the previous code. This idea of this is to generate random prefectures in some country, populate those prefectures with people, and have the prefectures merge democratically or dictatorially based on two parameters: high taxes of having a small country, and having to go too far to get utilities (library, school, etc) in a large country. The initial prefectures I generated using Perlin noise, and I simulated each prefecture having populations which decide what they want to produce the results. I implemented techniques from procedural geography generation (note the references to polygons and coastlines), pure mathematics (this is more subtle, but we had to introduce different "sorts" of people into the model to achieve any results - the insight here is that by the Four Color Theorem we only need four types of people), and behavioral economics.

The third file (seventyfivek_to_3k_2.R) is a facility for gathering statistics about the model in the previous paragraph. It basically varies the input constants and records the results, in a convenient, RData format.

The fourth file is an interface from my model in R to the common optimization file format CPlex. It takes in some initial parameters, then builds CPlex source from it to run in an optimizer (in my case, SCIP). The purpose of the optimizer was to ensure that the "people" in the model made the "right" decisions.

This code was all written, tested, debugged, and used for analysis over a 5.5-week period in Tokyo, Japan. A paper also resulted from similar work, as well as substantial simulation data. As it is presented this code will not run; it requires databases that may or may not be the property of the National Graduate Institute for Policy Studies, in Tokyo, Japan.
